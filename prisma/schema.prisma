// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique @db.VarChar(100)
  name      String   @db.VarChar(50)
  password  String   @db.VarChar(255)
  image     String?  @db.VarChar(255)
  phone     String?  @db.VarChar(20)
  address   String?  @db.VarChar(100)
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  orders   Order[]
}

model Package {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  description String   @db.VarChar(255)
  price       Decimal  @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requiredFields PackageField[]
  orders         Order[]
}

enum FieldType {
  TEXT
  EMAIL
  PHONE
  FILE
  SELECT
  TEXTAREA
  DATE
}

model PackageField {
  id          String    @id @default(cuid())
  fieldName   String    @db.VarChar(20)
  fieldLabel  String    @db.VarChar(20)
  fieldType   FieldType
  isRequired  Boolean   @default(true)
  options     String[]  @default([])
  order       Int
  createdAt   DateTime  @default(now())

  packageId   String
  package     Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  COMPLETED
  CANCELLED
}

model Order {
  id            String      @id @default(cuid())
  status        OrderStatus @default(PENDING)
  totalAmount   Decimal     @db.Decimal(10, 2)
  paymentId     String?
  paymentStatus String?     @db.VarChar(20)
  formData      Json
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  userId        String
  user          User    @relation(fields: [userId], references: [id])

  packageId     String
  package       Package @relation(fields: [packageId], references: [id])

  files         OrderFile[]
}

model OrderFile {
  id            String @id @default(cuid())
  fieldName     String @db.VarChar(20)
  fileName      String @db.VarChar(100)
  fileUrl       String @db.VarChar(255)
  fileSize      Int    @db.Integer
  createdAt     DateTime @default(now())

  orderId       String
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
